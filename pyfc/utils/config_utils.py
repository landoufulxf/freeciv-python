'''
config_utils.py

Functions relating to freeciv config files

@yashbonde 20.01.2019
'''

# importing the dependencies
import ast

def write_config_file(path, key2val, log = None):
    '''
    Write config file 
    '''
    # write config file
    text_ =  '// THIS IS IS AN AUTOGENERATED FILE\n'
    text_ += '// read utils.config_utils for more details\n'
    text_ += '//'

    for key in key2val:
        line = '{0} = {1}\n'.format(key, key2val[key])
        text_ += line

    if not path.split('.')[-1] == 'fccfg':
        path += '.fccfg'

    with open(path, 'w', encoding = 'utf-8') as f:
        f.write(text_)

    if log:
        log.add_INFO('config_utils.write_cfg_file: Config file written: {0}'.format(path))

def read_config_file(path, key_list, log = None):
    '''
    Read config from file
    '''
    with open(path, encoding = 'utf-8') as f:
        lines = f.readlines()
    
    key2val = {}
    for l in lines:
        if l[0:2] == '//' or l[0] == '\n' or l[0] == '$':
            continue
        tok = l.split('=')
        key, val_ = tok[0].split()[0], tok[1]
        val = ast.literal_eval(val_.split()[0])
        
        if key not in key_list:
            if log:
                log.add_INFO('config_utils.read_config_file_from_path: ValueError: Incorrect Config File, key: {0} not found!'.format(key))
            raise ValueError('Incorrect Config File, key: {0} not found!'.format(key))
            
        key2val.update({key: val})

    if not list(key2val.keys()) == key_list:
        if log:
            log.add_INFO('config_utils.read_config_file_from_path: ValueError: Incorrect config file, minimum requirements not satisfied')
        raise ValueError('Incorrect config file, minimum requirements not satisfied')

    if log:
        log.add_INFO('config_utils.read_config_file_from_path: {0} read and dictionary made'.format(path))
                
    return key2val