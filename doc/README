==== README ====

This is the main readme for this package. For all the details we are to refer to 
docs here.

=== PACKAGE INTERFACE (v0.1) ===

The interface package structure is as follows:

(A) <=> (B) <=> (C) <=> (D) <=> (E)

where:

(A): User/Agent (python) : this is the agent which will call the freeciv (B)
(B): FreeCiv World (python): This is similar to OpenAI gym env, it has similar
     classes and methods as the env.
(C): Interface (Python): Backend and interface in python
(D): Interface (C++): Interface to client and server
(E): FreeCiv Client/Server: The modified game with API/taps (??)

=== PACKAGE INTERFACE (v0.4) ===

The interface structure has been changed from bidirectional pipe to a more 
classic hub and spoke like structure, though it's very difficult to draw it here. 

World is the first class that is initiated and it makes different internal classes:
  1. InferenceHandler: This is the 'hub' in the software this is the main part that 
      converts the user understandable response to game response, it is also the 
      piece that handles the different things, such as each city is 
      'CityInferenceHandler' and each unit is 'UnitInferenceEngine' and so forth 
  2. AttrHandler: This is a basic wrapper for selectively handling the different 
      attributes e.g. game attributes or network attributes

The inference engines are divided in two different types:
  3. ActionInferenceEngine: This is the base class for all the elements of state in 
      which action can be taken, i.e. Cities, Units, Diplomacy, etc.

  4. NonActionInferenceEngine: This is the base class for all the elements of state 
      in which actions are note required e.g. User Info

I call this 'spoke entry hub & spoke model' rather than the conventional 
'hub entry hub & spoke'

=== Targets ===

Simplicity of the package for maximum ease of use from researcher's side is 
priority and ultimate goal, which is same as for OpenAI gym. For achieving this 
target we need to do the following: 

    - package should be installable as $ pip3 install freeciv-python
    - should install the complete game and not just the wrapper to existing 
      installation (this is a very idealistic situation looking very undoable)
    - starting and ending game (and in extension server) should be possible right 
      from the python interface and should not require any external command
      (this again is very difficult and for now depending on external 
      initialization of the server)

For examples read the code snippets given in repo github.com/yashbonde/freeciv-related 
I deal with all the freeciv related things there such as map understanding and unit 
handling.


=== Details (On how to rob existing codebase) ===

There are many things that we can learn from the existing codebase. Savefiles 
are great way to look at the game and its state at any given moment. There needs 
to be an efficient way of handling the logs to replay the game. If we have to 
rely on savefiles, the model will be extremely inefficient.


== Deep Learning Models ==

This package has been designed with deep learning in mind and thus if during any 
conflict of interest between neural nets and other architectures, neural nets 
will be preferred.


== Future Plans ==

I think with every single big project that we do there should be clear goals we 
are trying to achieve. Without clear goals everything falls apart, and with very 
detailed steps we forget the big picture. So this is it:

- In the first release provide a simple way to interact with the freeciv world 
  using the package. We should have all the detailed maps (as per freeciv 3.1), 
  unit, city structure and a clear technology graph. This way we will have a MVP 
  and foundation ready for building on top of it.

- In next patch provide the modified GUI interface for replaying/recording (play 
  the game and record all the moves to generate datasets) the game via a log 
  file (we will need to develop it, even the freeciv team is finding it hard to 
  keep logs for replay). Having a GUI will increase the speed 10x and will also 
  bring much needed publicity to it.

- Provide simpler interface for running server via the python part world itself, 
  keep the majority processing in C because of processing requirements. This 
  simpler interface is designed to help people with multi-agent interactions.

- Move on to the next big thing. Let others build it as they see fit. At this 
  stage once everything above is achieved, I will handover the repo to someone 
  else to work their magic on it!

-- Yash Bonde